#!/usr/bin/python

"""
    python-pycurl
    pyhon-requests

    - progress callback
    - limit download rate
    - keepalive
    - multipart download
"""


import re
import sys
import time
import m3u8
import fcntl
import prctl
import os.path
import requests
import threading
import subprocess
from   urlparse    import urlparse, urlunparse

PERCENT = 0
LOCK    = threading.Lock()

def progression(percent):
    global PERCENT

    PERCENT = percent
    LOCK.release()

def download_m3u8(source, destination='/tmp/foobar', progress_clb=None):
    prctl.set_name('M3U8 downloader')
    baseuri = urlparse(source)
    m3u     = m3u8.load(source)
    print m3u
    #print m3u.segments, m3u.is_variant

    if m3u.is_variant:
        print "VARIANT"
        for item in m3u.playlists:
            print '>',item
            print item.uri, item.stream_info
    else:
        out = file(destination, 'wb')

        nseg = 0
        for segment in m3u.segments:
            nseg += 1
            uri = urlparse(segment.uri)
            if(uri.scheme == ''): #
                uri = (baseuri.scheme, baseuri.netloc, os.path.dirname(baseuri.path) + '/' + uri.path, 
                    uri.params, uri.query, uri.fragment)

            uri = urlunparse(uri)
            #print ">", segment, type(segment), uri
            r = requests.get(uri, stream=True)
            while True:
                data = r.raw.read(4096)
                if len(data) == 0:
                    break
                
                out.write(data)

            if progress_clb is not None:
                progress_clb(float(nseg)/len(m3u.segments))
       
        out.close() 
        LOCK.release()

def download_rtmp(source, destination='/tmp/foobar', progress_clb=None):
    prctl.set_name('RTMP downloader')
    proc = subprocess.Popen(['rtmpdump','-e','-r',source,'-o',destination], 
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT
    )

    loop = True
    def progress():
        prctl.set_name('rtmp progress')

        fd = proc.stdout.fileno()
        fl = fcntl.fcntl(fd, fcntl.F_GETFL)
        fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)

        while loop:
            try:
                output = proc.stdout.read().strip().split('\n')[-1]
                m = re.match(".*\(([\d\.]+)%\).*", output)
                if m:
                    progress_clb(float(m.group(1))/100)
            except Exception:
                pass

            time.sleep(.5)

    t = threading.Thread(target=progress)
    t.start()
    proc.wait()

    loop = False
    t.join()
    LOCK.release()

def download(source, destination, progress_clb):
    dwnloader = None

    if source.endswith('.m3u8'):
        dwnloader = download_m3u8
    else:
        scheme = source.split(':', 1)[0]
        if scheme.startswith('rtmp'):
            dwnloader = download_rtmp

    if dwnloader is None:
        print "Cannot download '%s' stream (unknown stream type)" % source; return None
    
    return threading.Thread(target=dwnloader,name='downloader',args=(source, destination, progress_clb))

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print "Usage: %s url [out]" % sys.argv[0]; sys.exit(1)

    t = download(*(sys.argv[1:]+[progression]))
    if t is None:
        sys.exit(1)

    print 'starting downloading...'
    t.start()

    # take a 1st time to lock
    LOCK.acquire()
    while t.is_alive():
        LOCK.acquire()
        print "progression: %2.0f%%" % (PERCENT*100)


    t.join() 
    print 'download complete'

